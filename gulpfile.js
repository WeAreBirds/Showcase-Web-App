/// <binding BeforeBuild='jshint' ProjectOpened='watch' />
(function () {
    'use strict';

    // Include Gulp & tools we'll use
    var gulp = require('gulp');
    var $ = require('gulp-load-plugins')();
    var del = require('del');
    var runSequence = require('run-sequence');
    var LessPluginAutoPrefix = require('less-plugin-autoprefix');
    var browserSync = require('browser-sync');
    var historyApiFallback = require('connect-history-api-fallback');
    var pkg = require('./package.json');

    var AUTOPREFIXER_BROWSERS = [
      'ie >= 9',
      'ie_mob >= 9',
      'ff >= 30',
      'chrome >= 34',
      'safari >= 7',
      'opera >= 23',
      'ios >= 7',
      'android >= 4.4',
      'bb >= 10'
    ];

    var autoprefix = new LessPluginAutoPrefix({ browsers: AUTOPREFIXER_BROWSERS });

    var config = {
        path: {
            release: 'release/' + pkg.version
        },
        templateCache: {
            file: 'ng-templates.js',
            options: {
                module: 'MapsIndoors',
                //root: 'controllers',
                standAlone: true
            }
        }
    };
    gulp.task('build:less', function () {
        return gulp.src('app/less/**.less')
                .pipe($.less({ plugins: [autoprefix] }))
                .pipe($.header('/* This code was generated by a tool. */\r\n\r\n'))
                .pipe(gulp.dest('app/css/'))
                .pipe($.count('build:less: ## files where processed and copied.'));
    });

    gulp.task('run:jshint', function () {
        return gulp.src(['app/scripts/**/*.js', 'app/controllers/**/*.js', 'app/directives/**/*.js', 'gulpfile.js'])
                .pipe($.jshint.extract())
                .pipe($.jshint())
                .pipe($.jshint.reporter('jshint-stylish'))
                .pipe($.count('run:jshint: ## files were processed.'));
    });

    // Copy all files at the root level (app)
    gulp.task('copy', ['clean'], function () {
        return gulp.src(['app/assets/**'])
                .pipe(gulp.dest(config.path.release + '/assets/'))
                .pipe($.count('copy: ## files were copied.'))
                .pipe($.size({ title: 'copied' }));
    });

    gulp.task('build:ng-templates', ['clean'], function () {
        return gulp.src(['app/**/**/*.tpl.html'])
            .pipe($.minifyHtml({ empty: true }))
            .pipe($.angularTemplatecache(
                config.templateCache.file,
                config.templateCache.options
            ))
            .pipe(gulp.dest('.tmp/'))
            .pipe($.size({ title: 'ng-templates' }));
    });

    // Scan your HTML for assets & optimize them
    gulp.task('build:release', ['clean', 'copy', 'build:less', 'build:ng-templates'], function () {
        var assets = $.useref.assets({ searchPath: ['.tmp', 'app'] });

        return gulp.src(['app/**/*.html', '!**/*.tpl.html'])
                   .pipe($.inject(gulp.src(['.tmp/ng-templates.js'], { read: false }), { name: 'inject:templates', relative: true }))
                  .pipe(assets)
                  .pipe($.if('*.js', $.ngAnnotate()))
                  .pipe($.if('*.js', $.uglify({ preserveComments: 'some' })))
                  .pipe($.if('*.css', $.cssmin()))
                  .pipe(assets.restore())
                  .pipe($.useref())
                  .pipe($.htmlReplace({ 'base': '<base href="/">' }))
                  .pipe(gulp.dest(config.path.release))
                  .pipe($.size({ title: 'compiled' }));

    });

    // Clean output directory
    gulp.task('clean', function () {
        return del(['.tmp', 'dist']);
    });

    // Load custom tasks from the `tasks` directory
    try { require('require-dir')('tasks'); } catch (err) { }

    gulp.task('watch', function () {
        gulp.watch(['gulpfile.js', 'app/scripts/**/*.js', 'app/directives/**/*.js', 'app/controllers/**/*.js'], ["run:jshint"]);
        gulp.watch(['app/less/**.less'], ["build:less"]);
    });

    gulp.task('serve:release', ['build:release'], function () {
        browserSync({
            // Run as an https by uncommenting 'https: true'
            // Note: this uses an unsigned certificate which on first access
            //       will present a certificate warning in the browser.
            // https: true,  
            port: 5000,
            server: config.path.release,
            middleware: [historyApiFallback()]
        });
    });
}());